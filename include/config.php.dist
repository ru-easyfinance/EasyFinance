<?php
/**
 * Файл с конфигурацией
 * @copyright http://easyfinance.ru/
 */
// Path settings
define('SYS_DIR_ROOT',     dirname(dirname(__FILE__)));

// @deprecated +
define('SYS_DIR_LIBS',     SYS_DIR_ROOT . "/core/");
define('SYS_DIR_INC',      SYS_DIR_ROOT . "/include/");
// @deprecated -

//Общая папка для кэша файлов
define('SYS_DIR_CACHE',    "${project.basedir}/tmp");
define('TMP_DIR_SMARTY',   SYS_DIR_CACHE . "/smarty");

// Каталог с загружаемыми файлами
define('DIR_SHARED',       "${project.shared.dir}" . DIRECTORY_SEPARATOR);
define('DIR_UPLOAD',       DIR_SHARED . "uploaded/");
define('DIR_CONFIG',       dirname(dirname(__FILE__)) . '/configs/');
define('DIR_TEMPLATES',    dirname(dirname(__FILE__)) . '/template/');

ini_set('include_path', ini_get('include_path') . PATH_SEPARATOR . SYS_DIR_LIBS . '/external/');

//получим схему явно - в этом месте не удается инстанциировать request,
//так как пути к нему заданы позже - в конфиге, который уже зависит от PROTOCOL_SCHEME
define ('USING_HTTPS', isset($_SERVER["HTTPS"]) ? 1 : 0);
define('PROTOCOL_SCHEME', USING_HTTPS ? 'https' : 'http');

//создание полного url
function createUrlWithScheme($urlWithoutScheme) {
    return PROTOCOL_SCHEME . "://" . $urlWithoutScheme;
}


//Настройки языка
putenv('LANG=ru_RU.utf8');
setlocale(LC_ALL, 'ru_RU.utf8');
setlocale(LC_NUMERIC, 'en_US.utf8');

// Other
define('IS_DEMO',          ${project.demo});
define('ENVIRONMENT',      "${project.environment}");

// Mail settings (including method)
define('MAIL_ENABLED',     ${project.mail.enabled});

// Ссылка на главную страницу сайта
define('HOST_ROOT_MAIN', "${project.url.root}/");

define('URL_ROOT_MAIN',    createUrlWithScheme(HOST_ROOT_MAIN));

define('HOST_ROOT_DEMO', "demo." . HOST_ROOT_MAIN);
define('URL_ROOT_DEMO',    createUrlWithScheme(HOST_ROOT_DEMO));

define('HOST_ROOT_IFRAME', "iframe." . HOST_ROOT_MAIN);
define('URL_ROOT_IFRAME', createUrlWithScheme(HOST_ROOT_IFRAME));

define('HOST_ROOT_RAMBLER', "rambler." . HOST_ROOT_MAIN);
define('URL_ROOT_RAMBLER', createUrlWithScheme(HOST_ROOT_RAMBLER));
if (!isset($_SERVER['HTTP_HOST']) || strpos($_SERVER['HTTP_HOST'], 'rambler') === false) {
    define('URL_ROOT_WIKI', URL_ROOT_MAIN . 'my/wikiwrapper/');
} else {
    define('URL_ROOT_WIKI', URL_ROOT_RAMBLER . 'my/wikiwrapper/');
}
//реальный адрес wiki, используемый в айфрейме
define ('URL_IFRAME_WIKI', createUrlWithScheme("wiki." . HOST_ROOT_MAIN));

define('URL_ROOT_BANNERS', createUrlWithScheme('fa.easyfinance.ru/'));

define('HOST_ROOT_PDA', "m." . HOST_ROOT_MAIN);
define('URL_ROOT_PDA',     createUrlWithScheme(HOST_ROOT_PDA));

define('HOST_ROOT', IS_DEMO ? HOST_ROOT_DEMO : HOST_ROOT_MAIN);

define('URL_ROOT', createUrlWithScheme(HOST_ROOT));

define('DEBUG',            ${project.debug});

//COOKIE
define('COOKIE_NAME',      "${project.cookie.name}"); // "a"

if (!isset($_SERVER['HTTP_HOST']) || strpos($_SERVER['HTTP_HOST'], 'rambler') === false)
    define('COOKIE_DOMEN', "${project.cookie.domain}"); // ".easyfinance.ru"
else
    define('COOKIE_DOMEN', $_SERVER['HTTP_HOST']);

define('COOKIE_PATH',      "${project.cookie.path}"); // по-умолчанию "/"
define('COOKIE_HTTPS',     USING_HTTPS ? 1 : 0);
define('COOKIE_EXPIRE',    ${project.cookie.expire}); // две недели = 60 * 60 * 24 * 2

//CRYPT
define('CRYPT_KEY',        "${project.crypt.key}"); // 24 битный ключ

// DB settings
define('SYS_DB_HOST',      "${project.db.host}");
define('SYS_DB_USER',      "${project.db.user}");
define('SYS_DB_PASS',      "${project.db.pass}");
define('SYS_DB_BASE',      "${project.db.base}");

// Js & css minifyin
define('JS_MINIFY',        ${project.jsmin.enabled});
define('CSS_MINIFY',       ${project.cssmin.enabled});

// Cache settings
define('CACHE_ENABLED',    ${project.cache.enabled});
define('CACHE_KEY_PREFIX', ${project.cache.keyPrefix});
define('CACHE_FILES_DIR', "${project.cache.dir}");

define('MEMCACHE_ENABLED', ${project.memcache.enabled});
define('MEMCACHE_HOST',    "${project.memcache.host}");
define('MEMCACHE_PORT',    ${project.memcache.port});

// Feedback settings
define('FEEDBACK_MAIL_MAIL', ${feedback.mail.mail});
define('FEEDBACK_MAIL_PASS', ${feedback.mail.pass});

define('FEEDBACK_FROM_MAIL', ${feedback.from.mail});
define('FEEDBACK_FROM_NAME', ${feedback.from.pass});

define('FEEDBACK_TO_MAIL',   ${feedback.to.mail});
define('FEEDBACK_TO_NAME',   ${feedback.to.pass});

// Current project revision (using for flush client cache after each build)
define('REVISION',         "${build.timestamp}");
