<?xml version="1.0" encoding="UTF-8"?>
<project name="Easyfinance build" default="build" basedir="..">

    <!-- Загрузка конфигов -->
    <echo>Load config ...</echo>
    <if>
        <available file="${project.basedir}/build/properties/config.conf" />
        <then>
            <echo>Use file ${project.basedir}/build/properties/config.conf</echo>
            <property file="${project.basedir}/build/properties/config.conf" />
            <property file="${project.basedir}/build/properties/defaults.conf" override="no" />
        </then>
        <else>
            <fail message="Not found file ${project.basedir}/build/properties/config.conf" />
        </else>
    </if>

    <!-- Проверяем, если у нас есть алиас rev для свойства project.git.rev, то ставим алиас -->
    <if>
        <isset property="rev" />
        <then>
            <property name="project.git.rev" value="${rev}" override="true" />
        </then>
    </if>

    <!-- Приводим имена директорий в нижний регистр -->
    <php function="strtolower" returnProperty="strlowerpath">
        <param value="${project.git.rev}"/>
    </php>

    <!-- Создание директорий -->
    <echo>Prepare paths ...</echo>
    <phing phingfile="build/paths.target.xml" inheritAll="true" target="System paths prepare" />


    <!-- Подключаем минификации CSS/JS -->
    <import file="build/minify.target.xml" />


    <!-- BUILD: Сборка проекта -->
    <target name="build">

        <!-- Получаем текущее время -->
        <tstamp>
            <format property="build.timestamp" pattern="%Y%m%d%H%I" />
        </tstamp>

        <echo>Configure config.php</echo>
        <copy file="include/config.php.dist"
            tofile="${project.basedir}/include/config.php" overwrite="true" >
            <filterchain>
                <expandproperties />
            </filterchain>
        </copy>

        <echo>Build symfony</echo>
        <copy file="${project.basedir}/sf/config/databases.yml.conf"
            tofile="${project.basedir}/sf/config/databases.yml" overwrite="true" >
            <filterchain>
                <expandproperties />
            </filterchain>
        </copy>
        <exec command="php ${project.basedir}/sf/symfony cc" dir="${project.basedir}/sf" checkreturn="true" />
        <exec command="php ${project.basedir}/sf/symfony doctrine:build --all-classes --application=frontend" dir="${project.basedir}/sf" checkreturn="true" />
        <if>
            <isset property="no-migration" />
            <then>
                <echo>Do not migrate</echo>
            </then>
            <else>
                <exec command="ls | wc -l" outputProperty="migration.version" dir="${project.basedir}/sf/lib/migration/doctrine" />
                <echo level="warning">Migrating Doctrine DB to: ${migration.version}</echo>
                <exec command="php ${project.basedir}/sf/symfony doctrine:migrate ${migration.version}" dir="${project.basedir}/sf" checkreturn="true" outputProperty="migration.output" />
                <echo level="warning" msg="${migration.output}" />
            </else>
        </if>
        <exec command="php ${project.basedir}/sf/symfony project:optimize frontend" dir="${project.basedir}/sf" checkreturn="true" />
        <exec command="php ${project.basedir}/sf/symfony project:optimize admin" dir="${project.basedir}/sf" checkreturn="true" />
        <exec command="php ${project.basedir}/sf/symfony project:optimize api" dir="${project.basedir}/sf" checkreturn="true" />
        <exec command="php ${project.basedir}/sf/symfony project:permissions" dir="${project.basedir}/sf" checkreturn="true" />

        <!-- Minify -->
        <phingcall target="minify-js" />
        <phingcall target="minify-css" />
    </target>


    <!-- UPDATE: Build + Обновляем все файлы: собрать проект для указанной ревизии -->
    <target name="update" depends="checkout, build">
    </target>


    <!-- INSTALL: Собрать копиию проекта из указанной ревизии в отдельной директории -->
    <target name="install" depends="update, backup, deploy">
    </target>


    <!-- CHECKOUT: Обновление - создание репозитария проекта -->
    <target name="checkout">
        <if>
            <!--Если текущая ветка доступна - обновляем -->
            <available file="${project.basedir}/.git" type="dir" />
            <then>
                <!-- cd BASEDIR; git fetch  -->
                <echo>git fetch repo ${project.git.rev}</echo>
                <exec command="${git.bin.path} fetch" dir="${project.basedir}" passthru="true" checkreturn="true" />
                <exec command="${git.bin.path} fetch --tags" dir="${project.basedir}" passthru="true" checkreturn="true" />
                <echo>git remote prune origin</echo>
                <exec command="${git.bin.path} remote prune origin" dir="${project.basedir}" passthru="true" checkreturn="true" />

                <!-- cd BASEDIR/sf/lib/vendor/symfony; git submodule  -->
                <echo>git fetch submodule repo /sf/lib/vendor/symfony</echo>
                <exec command="${git.bin.path} fetch" dir="${project.basedir}/sf/lib/vendor/symfony" passthru="true" checkreturn="true"/>

                <!-- cd BASEDIR/sf/plugins/sfPhpunitPlugin; git submodule  -->
                <echo>git fetch submodule repo /sf/plugins/sfPhpunitPlugin</echo>
                <exec command="${git.bin.path} fetch"
                    dir="${project.basedir}/sf/plugins/sfPhpunitPlugin" passthru="true" checkreturn="true" />

                <echo>Use git branch ${project.git.rev}</echo>
                <!-- cd BASEDIR; git checkout branch -->
                <exec command="${git.bin.path} checkout ${project.git.rev}"
                    dir="${project.basedir}" passthru="true" checkreturn="true" />

                <exec command="${git.bin.path} submodule update --init"
                    dir="${project.basedir}" passthru="true" checkreturn="true" />
            </then>
            <!--Если нет - ругаемся.. Делай клон вручную -->
            <else>
                <fail message="Expected git repositary. Clone manually." />
            </else>
        </if>
    </target>


    <!-- DEPLOY: Копируем проект в отдельную директорию и перебрасываем симлинк -->
    <target name="deploy">

        <!--Директории для выкатки -->
        <delete dir="${project.path.deploy}/releases/tags/${strlowerpath}" includeemptydirs="true" verbose="false" failonerror="true" />
        <mkdir dir="${project.path.deploy}/releases/tags/${strlowerpath}"/>

        <!-- Получаем текущее время -->
        <tstamp>
            <format property="build.time" pattern="%Y%m%d%H%I" />
        </tstamp>

        <!-- Копируем BASEDIR директорию в дирректорию для сборки -->
        <exec command="tar --exclude-from ${project.basedir}/build/properties/deploy_exclude.txt -cf - . | (cd ${project.path.deploy}/releases/tags/${strlowerpath} &amp;&amp; tar -xpBf -)" dir="${project.basedir}" checkreturn="true" />
        <exec command="ln -s ${project.basedir}/shared ${project.path.deploy}/releases/tags/${strlowerpath}/shared" checkreturn="true" />
    </target>


    <!-- SWITCH: Переключаем ветку -->
    <target name="switch">
        <if>
            <!--Если текущая ветка доступна - обновляем -->
            <available file="${project.path.deploy}/releases/tags/${strlowerpath}" type="dir" />
            <then>
                <!-- Создаём симлинк на текущую дирректорию -->
                <echo>Link branch '${strlowerpath}' to current...</echo>
                <exec command="rm current" dir="${project.path.deploy}/releases" />

                <exec command="ln -s ${project.path.deploy}/releases/tags/${strlowerpath} current"
                    dir="${project.path.deploy}/releases" checkreturn="true" />
            </then>
            <else>
                <fail message="Expected project directory '${project.path.deploy}/releases/tags/${strlowerpath}'. Make before 'phing install -Drev=${strlowerpath}'" />
            </else>
       </if>
    </target>


    <!-- PHPUNIT: Тесты -->
    <target name="phpunit" depends="build">
        <echo msg="PHP Unit..." />
        <exec command="phpunit --log-junit ${project.basedir}/build/logs/phpunit.xml ${project.basedir}/sf/test/AllTests.php"
              dir="${project.basedir}/sf/test" checkreturn="true" passthru="true" />
    </target>


    <!-- CLONEUSERS: Генерация пользователей -->
    <target name="cloneusers">
        <echo msg="Clonning demo users..." />
        <exec command="php ${project.basedir}/cron/demo/generateUsers.php -uid tst -c 1 -sdb ${project.sdb.user}:${project.sdb.pass}@${project.sdb.host}/${project.sdb.base} --force"
              dir="${project.basedir}/cron/demo" />
        <exec command="php ${project.basedir}/cron/demo/generateUsers.php -uid aminin -c 1 -sdb ${project.sdb.user}:${project.sdb.pass}@${project.sdb.host}/${project.sdb.base}  --no-truncate --force"
              dir="${project.basedir}/cron/demo" />
        <exec command="php ${project.basedir}/cron/demo/generateUsers.php -uid kristina13 -c 1 -sdb ${project.sdb.user}:${project.sdb.pass}@${project.sdb.host}/${project.sdb.base} --no-truncate --force"
              dir="${project.basedir}/cron/demo" />
    </target>


    <!-- BACKUP: Делаем бекап -->
    <target name="backup">
        <!-- Проверяем, Может быть мы и не хотели бекапиться -->
        <if>
            <isset property="no-backup" />
            <then>
                <echo msg="Do not create backup" />
            </then>
            <else>
                <tstamp>
                    <format property="project.time" pattern="%Y%m%d%H%I" />
                </tstamp>
                <echo msg="Create backup" />
                <exec command="mysqldump --skip-triggers -h ${project.db.host} -u ${project.db.user} -p${project.db.pass} ${project.db.base} > ${project.basedir}/../${project.url.root}_${project.time}.sql" checkreturn="true" />
                <!-- Сохраняем последний бэкап в удобном для скачивания виде -->
                <exec command="cp ${project.basedir}/../${project.url.root}_${project.time}.sql ${project.basedir}/../${project.url.root}.sql" />
                <exec command="rm ${project.basedir}/../${project.url.root}.sql.gz" />
                <exec command="gzip ${project.basedir}/../${project.url.root}.sql" />
            </else>
        </if>
    </target>

</project>
