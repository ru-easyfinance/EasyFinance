<?xml version="1.0" encoding="UTF-8"?>
<project name="Easyfinance build" default="build" basedir="..">

	<!-- Подключение библиотек для сжатия css и js-->
	<taskdef name="stubjsmin" classname="tasks.stubJsMinTask" classpath="${project.basedir}/build/libs" />
	<taskdef name="stubcssmin" classname="tasks.stubCssMinTask" classpath="${project.basedir}/build/libs"/>

    <!-- Сборка проекта: подготовка конфигов, создание директорий, сжатие js и css -->
	<target name="build" depends="Configuration prepare">

        <phing phingfile="build/paths.target.xml" inheritAll="true" target="System paths prepare" />

        <!-- Получаем текущее время -->
        <tstamp>
            <format property="project.svn.revision" pattern="%Y%m%d%H%I" />
        </tstamp>

        <echo>Configure config.php</echo>

        <copy file="include/config.php.dist"
			tofile="${project.basedir}/include/config.php" overwrite="true" >
            <filterchain>
                <expandproperties />
            </filterchain>
        </copy>

        <echo>Configure sf/config/databases.yml</echo>

        <copy file="${project.basedir}/sf/config/databases.yml.conf"
			tofile="${project.basedir}/sf/config/databases.yml" overwrite="true" >
            <filterchain>
                <expandproperties />
            </filterchain>
        </copy>

		<phing phingfile="build/minify.target.xml" inheritAll="true" target="minify" />
	</target>

    <!-- Build + Обновляем все файлы: собрать проект для указанной ревизии -->
	<target name="update" depends="checkout, build">
        <exec command="./symfony doctrine:build --all-classes" dir="${project.basedir}/sf/" passthru="true" />
	</target>

    <!-- Собрать копиию проекта из указанной ревизии в отдельной директории -->
	<target name="install" depends="update, backup, deploy">
	</target>

	<!-- Загрузка конфигов -->
	<target name="Configuration prepare">
        <if>
            <available file="${project.basedir}/build/properties/config.conf" />
            <then>
                <echo>Use file ${project.basedir}/build/properties/config.conf</echo>
                <property file="${project.basedir}/build/properties/config.conf" />
                <property file="${project.basedir}/build/properties/defaults.conf" override="no" />
            </then>
            <else>
                <fail message="Not found file ${project.basedir}/build/properties/config.conf" />
            </else>
        </if>

        <!-- Проверяем, если у нас есть алиас rev для свойства project.git.rev, то ставим алиас -->
        <if>
           <isset property="rev" />
           <then>
               <property name="project.git.rev" value="${rev}" override="true" />
           </then>
        </if>
	</target>

	<!-- Обновление - создание репозитария проекта -->
	<target name="checkout" depends="Configuration prepare">
		<if>
			<!--Если текущая ветка доступна - обновляем -->
			<available file="${project.basedir}/.git" type="dir" />
			<then>
                <!-- cd BASEDIR; git fetch  -->
                <echo>git fetch repo ${project.git.rev}</echo>
                <exec command="${git.bin.path} fetch"
                    dir="${project.basedir}" passthru="true" />

                <!-- cd BASEDIR/sf/lib/vendor/symfony; git submodule  -->
                <echo>git fetch submodule repo /sf/lib/vendor/symfony</echo>
                <exec command="${git.bin.path} fetch"
                    dir="${project.basedir}/sf/lib/vendor/symfony" passthru="true" />

                <!-- cd BASEDIR/sf/plugins/sfPhpunitPlugin; git submodule  -->
                <echo>git fetch submodule repo /sf/plugins/sfPhpunitPlugin</echo>
                <exec command="${git.bin.path} fetch"
                    dir="${project.basedir}/sf/plugins/sfPhpunitPlugin" passthru="true" />

                <echo>Use git branch ${project.git.rev}</echo>
                <!-- cd BASEDIR; git checkout branch -->
                <exec command="${git.bin.path} checkout ${project.git.rev}"
                    dir="${project.basedir}" passthru="true" />

                <exec command="${git.bin.path} submodule update --init"
                    dir="${project.basedir}" passthru="true" />

			</then>
			<!--Если нет - ругаемся.. Делай клон вручную -->
			<else>
                <fail message="Need run command git clone manually" />
			</else>
		</if>
	</target>

    <!-- Переключение -->
	<target name="deploy" depends="Configuration prepare">
		<if>
			<istrue value="${nginx.config.check}"/>
			<then>
				<echo>Check nginx config syntax...</echo>
				<exec command="${nginx.bin.path} -t" checkreturn="false" />
			</then>
		</if>

        <!-- Получаем текущее время -->
        <tstamp>
            <format property="build.time" pattern="%Y%m%d%H%I" />
        </tstamp>

        <!-- Копируем BASEDIR директорию в дирректорию для сборки -->
        <copy todir="${project.path.deploy}/releases/tags/${project.git.rev}" >
            <fileset dir=".">
                <exclude name=".git/**" />
                <exclude name="**/.git/**" />
                <exclude name="**/web.api/dev.php" />
            </fileset>
        </copy>

        <!-- Создаём симлинк на текущую дирректорию-->
        <echo>Link branch '${project.git.rev}' to current...</echo>
        <exec command="rm -f current"
            dir="${project.path.deploy}/releases" />
        <exec command="ln -s ${project.path.deploy}/releases/tags/${project.git.rev} current"
            dir="${project.path.deploy}/releases" checkreturn="true" />

        <!-- Перезапускаем (если нужно nginx и php-fpm) -->
        <if>
            <istrue value="${nginx.bin.path}"/>
            <then>
                <echo>Reloading nginx and php-fpm proceses</echo>
                <exec command="${nginx.rc.path} reload" checkreturn="true" />
                <exec command="${fpm.rc.path} reload" checkreturn="true" />
            </then>
        </if>
    </target>

    <!-- Делаем бекап -->
	<target name="backup" depends="Configuration prepare">
        <tstamp>
            <format property="project.time" pattern="%Y%m%d%H%I" />
        </tstamp>
        <exec command="mysqldump -u ${project.db.user} -p${project.db.pass} ${project.db.base} > ${project.basedir}/${project.url.root}_${project.time}.sql" checkreturn="true" />
    </target>
</project>
