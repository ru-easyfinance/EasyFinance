# Временная заглушка
homepage:
  url:   /
  params: { module: info, action: index }


# Профиль
# ------------------------------------------------------------------------------

# отобразить форму редактирования профиля
profile_form:
  url:   /profile/
  class: sfRoute
  param: { module: profile, action: index }
  requirements:
    sf_method: [get]

# сохранение профиля
profile_save:
  url:   /profile/save_main_settings.:sf_format
  class: sfRequestRoute
  param: { module: profile, action: save }
  requirements:
    sf_method: [post] # PUT, если js-кой эмулировать =)
    sf_format: json

# сохранение настроек оповещений, t1497
save_reminder_settings:
  url: /profile/save_reminders
  class: sfRoute
  param: { module: profile, action: saveReminders }
  requirements:
    sf_method: [get, post]

# загрузка пользовательских данных в js-объект
load_user_data:
  url: /profile/load_main_settings
  class: sfRoute
  param: { module: profile, action: loadUserData }

# Импорт из csv
import_csv:
  url: /profile/import_csv
  class: sfRoute
  param: { module: profile, action: importCsv }
  requirements:
    sf_method: [get, post]


# Счета
# ------------------------------------------------------------------------------

# Создать счет для PDA, TODO: убрать в отдельное app
pda_account_create:
  url:      /account.pda
  class:    sfDoctrineRoute
  options:  { model: Account, type: object }
  param:    { module: account, action: createForPda, sf_format: pda }
  requirements:
    sf_method: post

# Создать счет
account_create:
  url:      /account.:sf_format
  class:    sfDoctrineRoute
  options:  { model: Account, type: object }
  param:    { module: account, action: create }
  requirements:
    sf_method: post

# Редактировать счет
account_edit:
  url:      /accountedit/:id.:sf_format
  class:    sfDoctrineRoute
  options:  { model: Account, type: object }
  param:    { module: account, action: edit }
  requirements:
    sf_method: post


# Услуги
# ------------------------------------------------------------------------------

services:
  url:   /services/
  params: { module: services, action: index }

robokassa:
  url:   /robokassa/:action
  params: { module: robokassa }


# Обёртка для wiki
# ------------------------------------------------------------------------------

wikiwrapper:
  url:    /wikiwrapper/
  class:  sfRoute
  params: { module: wikiwrapper, action: index }

wikiwrapper_page:
  url:    /wikiwrapper/:wikiURL
  class:  sfRoute
  params: { module: wikiwrapper, action: index }
  requirements:
    wikiURL: \S+


# Статические страницы
# ------------------------------------------------------------------------------

page_review:
  url:    /review/
  class:  sfRoute
  params: { module: page, action: index, pageName: review }


page:
  url:    /page/:pageName
  class:  sfRoute
  params: { module: page, action: index }
  requirements:
    pageName: \S+


# Бюджет
# ------------------------------------------------------------------------------

budget:
  url:   /budget/
  params: { module: budget, action: index }

budget_load:
  url:   /budget/load/
  params: { module: budget, action: load}

budget_add:
  url:   /budget/add/
  params: { module: budget, action: add}

budget_edit:
  url:   /budget/edit/
  params: { module: budget, action: edit}

budget_delete:
  url:   /budget/del/
  params: { module: budget, action: delete}


# Cтраницы банков с красивыми урлами
# ------------------------------------------------------------------------------

easybank:
  url:    /easybank/
  class:  sfRoute
  params: { module: page, action: index, pageName: easyBank }

easybank_amt_easyfinance:
  url:    /easybank/amt-easyfinance
  class:  sfRoute
  params: { module: page, action: index, pageName: amtEasyFinance }

easybank_citi_cashback:
  url:    /easybank/citi-cashback
  class:  sfRoute
  params: { module: page, action: index, pageName: citiCashBack }

easybank_citi_cashback_apply:
  url:    /easybank/citi-cashback-apply
  class:  sfRoute
  params: { module: easybank, action: citiCashBackApplication }
